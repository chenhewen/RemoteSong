import threading
import subprocess
import time
import re
from pathlib import Path

sound_dict = {
    "-1", "-1.mp3",
    "-2", "-2.mp3",
    "-3", "-3.mp3",
    "-4", "-4.mp3",
    "-5", "-5.mp3",
    "-6", "-6.mp3",
    "-7", "-7.mp3",

    "1", "1.mp3",
    "2", "2.mp3",
    "3", "3.mp3",
    "4", "4.mp3",
    "5", "5.mp3",
    "6", "6.mp3",
    "7", "7.mp3",

    "+1", "+1.mp3",
    "+2", "+2.mp3",
    "+3", "+3.mp3",
    "+4", "+4.mp3",
    "+5", "+5.mp3",
    "+6", "+6.mp3",
    "+7", "+7.mp3",
}

wait = 0


class MyClass(threading.Thread):
    def __init__(self, file, length):
        threading.Thread.__init__(self)
        self.file = "mp3/" + file + ".mp3"
        global wait
        self.length = length
        wait += float(length)
        # print(wait)

    def run(self):
        rate = 0.8
        time.sleep(rate * (wait - self.length))
        if Path(self.file).exists():
            subprocess.call(["afplay", self.file])


def cal_length(length_str):
    count_half = length_str.count('_')
    count_dot = length_str.count('.')
    count_full = length_str.count('-')
    half = pow(0.5, count_half)
    dot = pow(1.5, count_dot)
    full = count_full + 1
      # print("length_str: {}, half: {}, dot: {}, full: {}".format(length_str, half, dot, full))
    return full * dot * half


if __name__ == '__main__':
    song = [
        "-1_", "-5_", "3_", "-5_", "-1_", "-6_", "4_", "-6_",
        "-2_", "-5_", "-7_", "-5_", "-1_", "-5_", "3",
        "-1_", "-5_", "3_", "-5_", "-1_", "-6_", "4_", "-6_",
        "-2_", "-5_", "-1_", "-7_", "1-",

        "3_", "1_", "1_", "-5_", "-6_", "-6_", "4_", "3_",
        "2_", "2_", "2_", "2__", "1__", "3-",
        "3_", "1_", "1_", "-5_", "-6_", "-6_", "2_", "1_",
        "-7_", "1_", "2__", "5_", "3----__", "0",

        "5_", "5_", "5_", "3_", "3_", "4__", "4__", "0._", "3__",
        "2_", "2_", "2_", "1__", "3----__", "0_",
        "3_", "1_", "1_", "-5_", "-6_", "-6_", "2_", "1_",
        "-7_", "1_", "2_", "-7__", "1----__", "0_", "+1__", "+2__",

        "+3_", "+1_", "+1_", "5_", "6_", "6_", "+4_", "+3_",
        "+2", "-7__", "1__", "2_", "3_", "4__", "3_", "2__", "1_",
        "3_", "1_", "1_", "-5_", "-6_", "-6_", "4._", "3__",
        "2_", "2", "1__", "-7__", "1-",

        "3_", "1_", "1_", "-5_", "-6_", "-6_", "4_", "3_",
        "2_", "2_", "2_", "1__", "3----__", "0",
        "3_", "1_", "1_", "-5_", "-6_", "-6_", "2._", "1__",
        "-7_", "1_", "2__", "5_", "3----__", "0",

        "5_", "5__", "5__", "5_", "3_", "4_", "4--__", "4_", "3__",
        "2_", "2_", "2_", "1_", "3", "0",
        "3_", "1_", "1_", "-5_", "-6_", "-6_", "2_", "1_",
        "-7_", "1_", "2_", "-7__", "1----__", "0",

        "5_", "5_", "5_", "5_", "+1_", "7_", "6_", "5_",
        "5_", "2_", "3__", "4_", "3----__", "0",
        "3_", "1_", "1_", "1_", "-7_", "1_", "2_", "1_",
        "-7_", "1_", "2__", "5_", "5----__", "0",

        "5_", "5_", "5_", "5_", "+1_", "7_", "6_", "5_",
        "5_", "2_", "3__", "4_", "3----__", "0",
        "3_", "1_", "1_", "-5_", "-6_", "-6_", "2_", "1_",
        "-7_", "1_", "2__", "-7_", "1----__", "0",

        "5_", "5_", "5_", "5_", "+1_", "7_", "6_", "5_",
        "5_", "2_", "3__", "4_", "3----__", "0",
        "3_", "1_", "1_", "1_", "-7_", "1_", "2_", "1_",
        "-7_", "1_", "2__", "5_", "5----__", "0",

        "5_", "5_", "5_", "5_", "+1_", "7_", "6_", "5_",
        "5_", "2_", "3__", "4_", "3----__", "0",
        "3_", "1_", "1_", "1_", "-7_", "1_", "2_", "1_",
        "-7_", "1_", "2_", "-7__", "1-------__",

        "3_", "1_", "1_", "1_", "-7_", "1_", "2_", "1_",
        "-7_", "1_", "2_", "1__", "3----__", "0",
        "3_", "1_", "1_", "1_", "-7_", "1_", "2_", "1_",
        "-7_", "1_", "2_", "-7__", "1----__"

    ]
    rec_name = re.compile("[-|+|++]?[0-7]")
    rec_length = re.compile("(?<=[0-7])[_|.|\-|]*")
    for scale in song:
        name = rec_name.search(scale).group(0)
        length_str = rec_length.search(scale).group(0)
        length = cal_length(length_str)
        print("name: {}, length: {}".format(name, length))
        MyClass(name, length).start()
